<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:p="http://www.springframework.org/schema/p"  
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:jee="http://www.springframework.org/schema/jee"  
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xsi:schemaLocation="  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"> 
         
     
    <!-- redis config start -->  
    <!-- 配置JedisPoolConfig实例 -->  
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
    	<!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}" /> 
        <!-- 最大空连接数 --> 
        <property name="maxTotal" value="${redis.maxActive}" />  
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <!-- 返回连接时，检测连接是否成功 -->  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" /> 
        <!-- 连接超时时是否阻塞，false时报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="${redis.blockWhenExhausted}" /> 
    </bean>  
  
    <!-- 配置JedisConnectionFactory -->  
    <bean id="jedisConnectionFactory"  
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="hostName" value="${redis.host}" />  
        <property name="port" value="${redis.port}" />  
        <!-- <property name="password" value="${redis.pass}" /> -->  
        <property name="database" value="${redis.dbIndex}" />  
        <property name="poolConfig" ref="poolConfig" /> 
        <!-- usePool：是否使用连接池 -->
		<property name="usePool" value="true" /> 
    </bean>  
  
    <!-- 配置RedisTemplate -->  
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory" /> 
        <property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	    <!-- <property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>  -->
	    <property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property> 
		
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<!-- <property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property> --> 
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property> 
        <!--开启事务 -->
		<property name="enableTransactionSupport" value="true"></property> 
    </bean>  
  
    <!-- 配置RedisCacheManager -->  
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">  
        <constructor-arg name="redisOperations" ref="redisTemplate" />  
        <property name="defaultExpiration" value="${redis.expiration}" />  
    </bean>  
  
    <!-- 配置RedisCacheConfig -->  
    <bean id="redisCacheConfig" class="www.zhizunbao.utils.RedisCacheConfig">  
        <constructor-arg ref="jedisConnectionFactory" />  
        <constructor-arg ref="redisTemplate" />  
        <constructor-arg ref="redisCacheManager" />  
    </bean>  
    <!-- redis config end -->  
  
  
</beans>  